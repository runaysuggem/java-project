Employee Management System Project
====================================
Client  	: Codetrue 

Environment	: Java8, Spring Boot, ReactJS , MySQL DB.

Tools		: Maven, GIT/GITHUB,POSTMAN, Jenkins.

Team Size	: 4 

Duration	: 09-JUL-23 to till date.




Steps to working with Employee Management System
------------------------------------------------

project structure 
-------------------
java-backend 
|
|----src/main/java 
	|
	|---com.ihub.www
		|
		|----JavaBackendApplication.java

	|
	|----com.ihub.www.controller
		|	
		|----EmployeeController.java

	|----com.ihub.www.service
		|	
		|----EmployeeService.java
	
	|----com.ihub.www.repository
		|	
		|----EmployeeRepository.java (Interface)

	|----com.ihub.www.model
		|
		|----Employee.java
	|
	|----com.ihub.www.exception 
		|
		|----ResourceNotFoundException.java

|----src/main/resources
	|
	|---application.properties 
|
|
|----pom.xml 

step1:
------
	Create a spring boot starter project i.e java-backend.
	ex:
		starters :	
				Spring Web 
				Spring Data JPA
				MySQL driver 
				Lombok 
step2:
------
	Open the mysql database and create a below schema.
	ex:
	MYSQL> create schema employee_management_system;
	MYSQL> show databases;

step3:
------
	create a employees table inside the schema.
	ex:
	MYSQL> use employee_management_system;

	MYSQL> create table employees(
			id integer(3) AUTO_INCREMENT,
			first_name varchar(10),
			last_name varchar(10),
			email varchar(15),
			primary key(id)
		);		

	MYSQL> insert into employees 
		values(1,'Alan','Morries','alan@gmail.com');

	MYSQL> insert into employees 
		values(2,'Erick','Anderson','erick@zoho.com');

	MYSQL> commit;

	MYSQL> select * from employees;


step4:
------
	Configure MySQL database properties and server port number.
	
application.properties
------------------------
server.port=9191

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url= jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username= root
spring.datasource.password= root 


spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


step5:
------
	Create a Employee model class inside "com.ihub.www.model" pkg.

Employee.java
-------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	@Column
	private String firstName;
	@Column
	private String lastName;
	@Column
	private String email;
}

step6:
------
	Create EmployeeRepsitory.java inside "com.ihub.www.repository" pkg.

EmployeeRepository.java
-----------------------
package com.ihub.www.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> 
{

}
	
step7:
-----
	Create a ResourceNotFoundException.java inside "com.ihub.www.exception" package.

ResourceNotFoundException.java
-------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value =HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException 
{

	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String msg)
	{
		super(msg);
	}
}








































		 
